<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context-3.2.xsd
    http://www.springframework.org/schema/mvc
    http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
    http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

    <!-- 扫描controller（controller层注入） -->
    <context:component-scan base-package="com.springstudy">
        <!--加上include-filter，在切面上就可以不用加@Component了-->
        <context:include-filter type="annotation" expression="org.aspectj.lang.annotation.Aspect"/>
    </context:component-scan>




    <!-- 获取bean工具注入 -->
    <bean id="springContextHolder" class="com.gmk.framework.common.utils.SpringContextHolder" lazy-init="false"/>

    <!--注解映射器-->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"/>-->
    <!--注解适配器-->
    <!--<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"/>-->

    <!--注释驱动Bean定义，同时将bean自动注入容器中使用，可以代替上面两行 注解映射器和注解适配器，实际开发用这一句-->
    <mvc:annotation-driven  conversion-service="conversionService"/>

    <!--自定义参数转换器-->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <!--转换器-->
        <property name="converters">
            <bean class="com.springstudy.controller.converters.CustomDateConverter"/>
        </property>
    </bean>

    <!-- 避免IE在ajax请求时，返回json出现下载 -->
    <bean id="jacksonMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
            </list>
        </property>
    </bean>

    <!--通过aop配置提供事务增强，让service包下所有bean的所有的方法拥有事务       以下是配置方式，也可以使用注解-->
    <!--使用强大的切点表达式语言秦松定义目标方法-->
    <aop:config proxy-target-class="true">
        <!--通过AOP定义事务增强切面-->
        <aop:pointcut id="serviceMethod" expression="execution(* com.springstudy.service..*.*(..))"/>
        <!--引用事务增强-->
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txAdvice"/>
    </aop:config>

    <!--注解实现切面  需要加入下面配置-->
    <aop:aspectj-autoproxy/>

    <!-- 视图解析器  对模型视图添加前后缀 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/views/" p:suffix=".jsp"/>

    <!--文件上传-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!--设置文件上传最大尺寸5M-->
        <property name="maxUploadSize">
            <value>5242880</value>
        </property>
    </bean>

    <!--对静态资源文件的访问-->
    <mvc:resources mapping="/assets/**" location="/assets/" />

    <mvc:interceptors>
        <mvc:interceptor>
            <!--/**表示拦截所有url包括子url路径包含静态资源，一般加前缀-->
            <mvc:mapping path="/user/**"/>
            <bean class="com.springstudy.interceptor.HandlerInterceptor1"/>
        </mvc:interceptor>
    </mvc:interceptors>
</beans>